swagger: "2.0"
info:
  version: "1.0.0"
  title: "高等软件工程团队大作业项目API规范"
host: "localhost"
basePath: "/api"
tags:
- name: "user"
- name: "topic"
schemes:
- "http"
- "https"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create a new user"
      description: "This can only be done by administrator"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "success"
          schema:
            type: "integer"
            format: "int64"
            description: "Created user id"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Create list of users with given input array"
      description: "This can only be done by administrator"
      operationId: "createUsersWithList"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "success"
  /user/signin:
    get:
      tags:
      - "user"
      summary: "User signin the system"
      description: ""
      operationId: "signIn"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "username"
        description: "The username for signin"
        required: true
        type: "string"
      - in: "query"
        name: "password"
        description: "The password for signin in encrypted string"
        required: true
        type: "string"
      responses:
        "200":
          description: "success"
          schema:
            type: "string"
            description: "User token"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/signout:
    get:
      tags:
      - "user"
      summary: "User signout the system"
      description: ""
      operationId: "signOut"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "success"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user by id"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        description: "The user id that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "success"
          schema:
            $ref: "#/definitions/User"
    put:
      tags:
      - "user"
      summary: "Update user by id"
      description: ""
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        description: "User id that need to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "success"
    delete:
      tags:
      - "user"
      summary: "Delete user by id"
      description: "This can only be done by administrator"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        description: "The user id that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "success"
  /topic:
    post:
      tags:
      - "topic"
      summary: "Add a new topic"
      description: ""
      operationId: "addTopic"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Topic object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Topic"
      responses:
        "200":
          description: "success"
  /topic/getList:
    get:
      tags:
      - "topic"
      summary: "Get topic list"
      description: ""
      operationId: "getTopicList"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Topic"
  /topic/choose:
    post:
      tags:
      - "topic"
      summary: "Choose a topic"
      description: "Student choose a topic"
      operationId: "chooseTopic"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Topic id and student id"
        required: true
        schema:
          type: "object"
          required:
            - topicId
            - studentId
          properties:
            topicId:
              type: "integer"
              format: "int64"
            studentId:
              type: "integer"
              format: "int64"
      responses:
        "200":
          description: "success"
  /topic/{topicId}:
    get:
      tags:
      - "topic"
      summary: "Get topic by id"
      description: ""
      operationId: "getTopicById"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "topicId"
        description: "Id of topic to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "success"
          schema:
            $ref: "#/definitions/Topic"
    put:
      tags:
      - "topic"
      summary: "Update topic by id"
      description: ""
      operationId: "updateTopic"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Topic object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Topic"
      - in: "path"
        name: "topicId"
        description: "Topic id that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "success"
    delete:
      tags:
      - "topic"
      summary: "Delete topic by id"
      description: ""
      operationId: "deleteTopic"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "topicId"
        description: "Topic id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "success"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      role:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"
      name:
        type: "string"
      gender:
        type: "string"
      jobNum:
        type: "string"
      class:
        type: "string"
      title:
        type: "string"
      major:
        type: "string"
      email:
        type: "string"
      resume:
        type: "string"
  Topic:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      teacherId:
        type: "integer"
        format: "int64"
      studentId:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      difficulty:
        type: "string"
      description:
        type: "string"
      requirement:
        type: "string"
      createTime:
        type: "string"
      updateTime:
        type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      msg:
        type: "string"
