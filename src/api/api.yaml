swagger: "2.0"
info:
  version: "1.2.0"
  title: "高等软件工程团队大作业项目API规范"
host: "localhost"
basePath: "/api"
tags:
  - name: "user"
  - name: "topic"
schemes:
  - "http"
  - "https"
paths:
  /user:
    post:
      tags:
        - "user"
      summary: "Create a user"
      description: "This can only be done by administrator"
      operationId: "createUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object to be created"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "success"
          schema:
            type: "integer"
            format: "int64"
            description: "Created user id"
  /user/{userId}:
    get:
      tags:
        - "user"
      summary: "Get a user"
      description: ""
      operationId: "getUser"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "userId"
          description: "User id to be fetched"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "success"
          schema:
            $ref: "#/definitions/User"
    put:
      tags:
        - "user"
      summary: "Update a user"
      description: ""
      operationId: "updateUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "userId"
          description: "User id to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "User object to be updated"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "success"
    delete:
      tags:
        - "user"
      summary: "Delete a user"
      description: "This can only be done by administrator"
      operationId: "deleteUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "userId"
          description: "User id to be deleted"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "success"
  /user/list:
    get:
      tags:
        - "user"
      summary: "Get users"
      description: "If user id array is empty, return all user"
      operationId: "getUsers"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user id"
          required: true
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int64"
      responses:
        "200":
          description: "success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    post:
      tags:
        - "user"
      summary: "Create users"
      description: "This can only be done by administrator"
      operationId: "createUsers"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      responses:
        "200":
          description: "success"
    put:
      tags:
        - "user"
      summary: "Update users"
      description: ""
      operationId: "updateUsers"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      responses:
        "200":
          description: "success"
    delete:
      tags:
        - "user"
      summary: "Delete users"
      description: "This can only be done by administrator"
      operationId: "deleteUsers"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user id"
          required: true
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int64"
      responses:
        "200":
          description: "success"
  /user/signin:
    get:
      tags:
        - "user"
      summary: "User signin the system"
      description: ""
      operationId: "signIn"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "username"
          description: "The username for signin"
          required: true
          type: "string"
        - in: "query"
          name: "password"
          description: "The password for signin in encrypted string"
          required: true
          type: "string"
      responses:
        "200":
          description: "success"
          schema:
            $ref: "#/definitions/User"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
  /user/signout:
    get:
      tags:
        - "user"
      summary: "User signout the system"
      description: ""
      operationId: "signOut"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "username"
          description: "The username for signout"
          required: true
          type: "string"
      responses:
        "200":
          description: "success"
  /user/password:
    post:
      tags:
        - "user"
      summary: "User update password"
      description: ""
      operationId: "updatePassword"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User id, old pwd and new pwd"
          required: true
          schema:
            type: "object"
            required:
              - userId
              - oldPwd
              - newPwd
            properties:
              userId:
                type: "integer"
                format: "int64"
              oldPwd:
                type: "string"
              newPwd:
                type: "string"
      responses:
        "200":
          description: "success"
  /topic:
    post:
      tags:
        - "topic"
      summary: "Create a topic"
      description: ""
      operationId: "createTopic"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Topic object to be created"
          required: true
          schema:
            $ref: "#/definitions/Topic"
      responses:
        "200":
          description: "success"
          schema:
            type: "integer"
            format: "int64"
            description: "Created topic id"
  /topic/{topicId}:
    get:
      tags:
        - "topic"
      summary: "Get a topic"
      description: ""
      operationId: "getTopic"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "topicId"
          description: "Topic id to be fetched"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "success"
          schema:
            $ref: "#/definitions/Topic"
    put:
      tags:
        - "topic"
      summary: "Update a topic"
      description: ""
      operationId: "updateTopic"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "topicId"
          description: "Topic id to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Topic object to be updated"
          required: true
          schema:
            $ref: "#/definitions/Topic"
      responses:
        "200":
          description: "success"
    delete:
      tags:
        - "topic"
      summary: "Delete a topic"
      description: "This can only be done by administrator"
      operationId: "deleteTopic"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "topicId"
          description: "Topic id to be deleted"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "success"
  /topic/list:
    get:
      tags:
        - "topic"
      summary: "Get topics"
      description: "If topic id array is empty, return all topic"
      operationId: "getTopics"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of topic id"
          required: true
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int64"
      responses:
        "200":
          description: "success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Topic"
    post:
      tags:
        - "topic"
      summary: "Create topics"
      description: ""
      operationId: "createTopics"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of topic object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Topic"
      responses:
        "200":
          description: "success"
    put:
      tags:
        - "topic"
      summary: "Update topics"
      description: ""
      operationId: "updateTopics"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of topic object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Topic"
      responses:
        "200":
          description: "success"
    delete:
      tags:
        - "topic"
      summary: "Delete topics"
      description: "This can only be done by administrator"
      operationId: "deleteTopics"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of topic id"
          required: true
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int64"
      responses:
        "200":
          description: "success"
  /topic/choose:
    get:
      tags:
        - "topic"
      summary: "Get chosen topic"
      description: "This can only be done by student"
      operationId: "getChosenTopic"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "userId"
          description: "User id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "success"
          schema:
            $ref: "#/definitions/Topic"
    post:
      tags:
        - "topic"
      summary: "Choose a topic"
      description: "This can only be done by student"
      operationId: "setChosenTopic"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User id and topic id"
          required: true
          schema:
            type: "object"
            required:
              - userId
              - topicId
            properties:
              userId:
                type: "integer"
                format: "int64"
              topicId:
                type: "integer"
                format: "int64"
      responses:
        "200":
          description: "success"
  /topic/publish:
    get:
      tags:
        - "topic"
      summary: "Get published topic"
      description: "This can only be done by teacher"
      operationId: "getPublishedTopic"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "userId"
          description: "User id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "success"
          schema:
            $ref: "#/definitions/Topic"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      role:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"
      name:
        type: "string"
      gender:
        type: "string"
      jobNum:
        type: "string"
      class:
        type: "string"
      title:
        type: "string"
      major:
        type: "string"
      email:
        type: "string"
      resume:
        type: "string"
  Topic:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      teacherId:
        type: "integer"
        format: "int64"
      studentId:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      difficulty:
        type: "string"
      description:
        type: "string"
      requirement:
        type: "string"
      createTime:
        type: "string"
      updateTime:
        type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      msg:
        type: "string"
